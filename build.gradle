group 'micro-services'
version '1.0-SNAPSHOT'

buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
    }
    repositories {
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE"
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: "idea"
    apply plugin: "docker"

    repositories {
        //        https://github.com/spring-cloud/spring-cloud-openfeign/issues/13
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }

    ext {
        springCloudVersion = 'Finchley.RC1'
        mybatisSpringBootStarterVersion = '1.3.2'
        logstashLogbackEncoderVersion = '5.0'
    }

    task buildDocker(type: Docker, dependsOn: build) {
        push = false
        applicationName = jar.baseName
        dockerfile = file('src/main/docker/Dockerfile')
        doFirst {
            copy {
                from jar
                into stageDir
            }
        }
    }
}

project(":service-eureka") {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compile.exclude module: "spring-boot-starter-tomcat"
    }

    dependencies {
//        compile('org.springframework.cloud:spring-cloud-starter-config')
        compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-server')
        compile("org.springframework.boot:spring-boot-starter-undertow")
        compile("org.springframework.boot:spring-boot-starter-actuator")

        compile "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"

        runtime('org.springframework.boot:spring-boot-devtools')
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

project(":api-user") {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compile.exclude module: "spring-boot-starter-tomcat"
    }

    dependencies {
        compile project(":common-core")
        compile('org.springframework.cloud:spring-cloud-starter-config')
        compile('org.springframework.boot:spring-boot-starter-actuator')
        compile("org.springframework.boot:spring-boot-starter-undertow")
        compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
        compile('org.springframework.cloud:spring-cloud-starter-openfeign')
        compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
        compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
        compile "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"

        compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.8.0'
        compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.8.0'

        runtime('org.springframework.boot:spring-boot-devtools')
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

}

project(":api-shop") {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compile.exclude module: "spring-boot-starter-tomcat"
    }

    dependencies {
        compile project(":common-core")
//        监控模块以开启监控相关的端点
        compile('org.springframework.boot:spring-boot-starter-actuator')
        compile("org.springframework.boot:spring-boot-starter-undertow")
        compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
//       feign依赖
        compile('org.springframework.cloud:spring-cloud-starter-openfeign')
//        断路器的依赖
        compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')

        compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")

        compile "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"

        runtime('org.springframework.boot:spring-boot-devtools')
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

project(":common-core") {
    configurations {
        compile.exclude module: "spring-boot-starter-tomcat"
    }

    dependencies {
        compile fileTree(dir: 'lib', include: '*.jar')

        compile("com.google.guava:guava:24.0-jre")
        compile("com.auth0:java-jwt:3.2.0")
        compile("org.slf4j:jcl-over-slf4j:1.7.25")
        compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.10.0'
        compile group: 'com.alibaba', name: 'fastjson', version: '1.2.47'
        compile 'com.google.zxing:javase:3.3.2'

        compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
        compile 'javax.servlet:javax.servlet-api:3.1.0'
        compile(group: 'org.apache.poi', name: 'poi-ooxml', version: '3.16')
        compile('redis.clients:jedis:2.9.0')
    }
}


project(":service-turbine") {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compile.exclude module: "spring-boot-starter-tomcat"
    }

    dependencies {
        compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
        compile("org.springframework.boot:spring-boot-starter-undertow")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile('org.springframework.cloud:spring-cloud-starter-netflix-turbine')
        compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard')

        runtime('org.springframework.boot:spring-boot-devtools')
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}


project(":service-gateway") {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compile.exclude module: "spring-boot-starter-tomcat"
    }

    dependencies {
        compile project(":common-core")
//监控模块以开启监控相关的端点
        compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
        compile("org.springframework.boot:spring-boot-starter-undertow")
        compile("org.springframework.boot:spring-boot-starter-actuator")
//网关依赖
        compile('org.springframework.cloud:spring-cloud-starter-netflix-zuul')

        compile "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"

        runtime('org.springframework.boot:spring-boot-devtools')
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

project(":service-configs") {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compile.exclude module: "spring-boot-starter-tomcat"
    }

    dependencies {

        compile project(":common-core")
        compile('org.springframework.cloud:spring-cloud-config-server')
        compile('org.springframework.boot:spring-boot-starter-actuator')
        compile("org.springframework.boot:spring-boot-starter-undertow")
        compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
        compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
        compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
        compile "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"

        runtime('org.springframework.boot:spring-boot-devtools')
        testCompile('org.springframework.boot:spring-boot-starter-test')

    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

project(":api-product") {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compile.exclude module: "spring-boot-starter-tomcat"
    }

    dependencies {
        compile('org.springframework.cloud:spring-cloud-bus')
        compile('org.springframework.cloud:spring-cloud-starter-config')
        compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
        compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard')
        compile('org.springframework.cloud:spring-cloud-starter-netflix-turbine')
        compile('org.springframework.cloud:spring-cloud-starter-openfeign')
        compile('org.springframework.cloud:spring-cloud-stream')
        testCompile('org.springframework.boot:spring-boot-starter-test')
        testCompile('org.springframework.cloud:spring-cloud-stream-test-support')
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}